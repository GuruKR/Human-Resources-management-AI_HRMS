import React, { useState } from "react";
import axios from "axios";
import { toast } from "sonner";
import jsPDF from "jspdf";

const API = "http://localhost:5000/api/ai/resume-screening";

export default function AIResumeScreening() {
  const [files, setFiles] = useState([]);
  const [role, setRole] = useState("Software Engineer");
  const [results, setResults] = useState([]);
  const [loading, setLoading] = useState(false);

  const handleFileChange = (e) => setFiles([...e.target.files]);

  // 🧠 Handle bulk submission
  const handleSubmit = async (e) => {
    e.preventDefault();
    if (files.length === 0) return toast.error("Please upload at least one resume!");

    setLoading(true);
    setResults([]);

    try {
      const newResults = [];

      for (const file of files) {
        const formData = new FormData();
        formData.append("resume", file);
        formData.append("role", role);

        const { data } = await axios.post(API, formData, {
          headers: { "Content-Type": "multipart/form-data" },
        });

        newResults.push({ fileName: file.name, ...data });
        toast.success(`✅ ${file.name} screened successfully!`);
      }

      setResults(newResults);
      toast.success("🎉 All resumes processed successfully!");
    } catch (err) {
      console.error("❌ Error:", err);
      toast.error("One or more resumes failed to process.");
    } finally {
      setLoading(false);
    }
  };

  // 🧾 Generate PDF for one candidate
  const handleDownloadPDF = (res) => {
    const doc = new jsPDF();
    doc.setFont("helvetica", "bold");
    doc.setFontSize(18);
    doc.text("AI Resume Screening Report", 20, 20);

    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    doc.text(`Candidate: ${res.fileName}`, 20, 35);
    doc.text(`Selected Role: ${res.selectedRole}`, 20, 45);
    doc.text(`Predicted Best-Fit Role: ${res.bestFitRole}`, 20, 55);
    doc.text(`Confidence: ${res.confidence}`, 20, 65);
    doc.text(`ATS Score: ${res.atsScore} / 100`, 20, 75);

    doc.setFont("helvetica", "bold");
    doc.text("Matched Skills:", 20, 90);
    doc.setFont("helvetica", "normal");
    doc.text(res.matchedSkills.join(", ") || "None", 20, 100, { maxWidth: 170 });

    doc.setFont("helvetica", "bold");
    doc.text("Missing Skills:", 20, 115);
    doc.setFont("helvetica", "normal");
    doc.text(res.missingSkills.join(", ") || "None", 20, 125, { maxWidth: 170 });

    doc.setFont("helvetica", "bold");
    doc.text("Feedback:", 20, 140);
    doc.setFont("helvetica", "normal");

    const cleanFeedback = (res.feedback || "").replace(/[^\x00-\x7F]/g, "").trim();
    doc.text(cleanFeedback || "No feedback provided", 20, 150, { maxWidth: 170 });

    doc.setDrawColor(200, 200, 200);
    doc.line(20, 270, 190, 270);
    doc.setFontSize(10);
    doc.text("Generated by HRMS AI Resume Screener © 2025", 20, 277);

    doc.save(`AI_Resume_Report_${res.bestFitRole}_${res.fileName}.pdf`);
    toast.success(`📄 Report saved for ${res.fileName}`);
  };

  return (
    <div className="min-h-screen p-8 bg-gradient-to-br from-gray-50 to-blue-100">
      <div className="max-w-5xl mx-auto bg-white rounded-2xl shadow-lg p-6 border border-gray-200">
        <h2 className="text-3xl font-bold text-blue-800 bg-blue-100 px-4 py-2 rounded-lg inline-flex items-center gap-2 shadow-sm">
          🤖 Bulk AI Resume Screening
        </h2>

        {/* Upload Form */}
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="font-medium">Select Role</label>
            <select
              value={role}
              onChange={(e) => setRole(e.target.value)}
              className="w-full border p-2 rounded-lg mt-1"
            >
              <option>Software Engineer</option>
              <option>MERN Developer</option>
              <option>Data Analyst</option>
              <option>HR Recruiter</option>
              <option>Sales Executive</option>
            </select>
          </div>

          <div>
            <label className="font-medium">Upload Multiple Resumes (PDF / DOC / DOCX)</label>
            <input
              type="file"
              accept=".pdf,.doc,.docx"
              multiple
              onChange={handleFileChange}
              className="w-full border p-2 rounded-lg mt-1"
            />
          </div>

          <button
            type="submit"
            disabled={loading}
            className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-2 rounded-lg transition w-full"
          >
            {loading ? "Analyzing..." : `Analyze ${files.length || ""} Resumes`}
          </button>
        </form>

        {/* Results Table */}
        {results.length > 0 && (
          <div className="mt-10">
            <h3 className="text-2xl font-semibold mb-4">📊 Screening Results</h3>
            <div className="overflow-x-auto">
              <table className="w-full border border-gray-200 rounded-lg">
                <thead className="bg-gray-100">
                  <tr className="text-left">
                    <th className="p-3 border-b">#</th>
                    <th className="p-3 border-b">File Name</th>
                    <th className="p-3 border-b">Best Fit Role</th>
                    <th className="p-3 border-b">Confidence</th>
                    <th className="p-3 border-b">ATS Score</th>
                    <th className="p-3 border-b text-center">Report</th>
                  </tr>
                </thead>
                <tbody>
                  {results.map((res, i) => (
                    <tr key={i} className="hover:bg-gray-50">
                      <td className="p-3 border-b">{i + 1}</td>
                      <td className="p-3 border-b">{res.fileName}</td>
                      <td className="p-3 border-b text-blue-700 font-semibold">{res.bestFitRole}</td>
                      <td className="p-3 border-b">{res.confidence}</td>
                      <td className="p-3 border-b">{res.atsScore}</td>
                      <td className="p-3 border-b text-center">
                        <button
                          onClick={() => handleDownloadPDF(res)}
                          className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-1 rounded-md"
                        >
                          📄 Download
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}
